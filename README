Libtime is a package of subroutines for the manipulation of time values.
The subroutines handle leap seconds correctly by avoiding the use of
POSIX time_t for telling time.

Notes to those who write software that calls libtime subroutines:

If you wish to install libtime from the tarball you will need GNU make
and python version 3.  Install the libtime library the usual way:
    ./configure
    make
    sudo make install

In your C source code, define the entry points with:

    #include <time_subroutines.h>
    
To compile and link your program prog.c, which uses the library installed
in /usr/local/lib, do this:

    gcc -L/usr/local/lib/ -Wl,-rpath=/usr/local/lib prog.c -ltime -o prog

For installation from a repository, libtime is divided into three RPMs:
libtime for those who run programs that call libtime, libtime-devel for
those who write programs that call libtime, and libtime-doc, which contains
the comprehensive documentation for libtime.  If you install libtime-devel
from an RPM repository the library is installed in /usr/lib, so you need
specify only -ltime to compile and link with it.

In your Python source code, define the entry points with:

   import time_subroutines
   
Comprehensive documentation for the time subroutines is in avoid_time_t.pdf.
If you install libtime-doc from an RPM repository this will be in
/usr/share/doc/libtime-doc/.  If you are installing from the tarball
you can create the PDF by adding --enable-pdf to the ./configure line
before running make, or doing a second run of make with make pdf.
You will need LaTeX and many of its packages to compile the PDF.
Sudo make install will then install the file in /usr/local/share/doc/libtime/.

If it is not convenient to compile the documentation, it is also available
at this URL:

https://commons.wikimedia.org/wiki/File:Avoid_Using_POSIX_time_t_for_Telling_Time.pdf

In addition, there is concise documentation in man libtime.


Notes to those who maintain libtime:

To create the documentation file, invoke ./configure with --enable-pdf.
You will need LaTeX to build it.  Building the distribution kit builds
the PDF automatically.  For the convenience of those who write programs
that call the libtime subroutines, the documentation is also kept at this
URL:

https://commons.wikimedia.org/wiki/File:Avoid_Using_POSIX_time_t_for_Telling_Time.pdf

The version number of libtime is the distribution date, since the
unpredictability of leap seconds means the library will never be finished.
When updating the version number in configure.ac, don't forget to update
the sharable image version triplet, which is in configure.ac, NEWS and
the revision history section of avoid_time_t.tex.

The date also appears in avoid_time_t.tex, in three places: in the
PDF metadata, on the title page, and in the revision history.  The date
is also in file references.bib, so other documents can refer to the
current version.  That file is alse used by "Extending Coordinated
Universal Time to Dates Before 1972", at this URL:

https://commons.wikimedia.org/wiki/File:Extending_Coordinated_Universal_Time_to_Dates_Before_1972.pdf

That document is the source for the leap seconds table, which is built
from file extraordinary_days.dat.  The sources for that document are embedded
in its PDF, as are the sources for libtime embedded in avoid_time_t.pdf.

There are several test program in the distribution kit, which are built
automatically.  I use test_ep to be sure all of the entry points are
working.  To verify that the distribution kit is valid, I use
make distcheck and I also extract all of the embedded files from the PDF
into a clean directory and make sure the result builds.

On platforms without a C compiler that implements 128-bit integers, a subset
library is provided, omitting int128_to_string and time_tm_nano_to_integer.

I have not tried to port libtime to the Ubuntu distribution of GNU/Linux,
but Alien seems to create reasonable .deb files from the libtime, libtime-devel
and libtime-doc RPMs.

Here is the checklist I use to be sure I am distributing working software:

1. Perform whatever updates are called for to the libtime sources.

2. Update the version number to today's date, and update the version-info
   triplet, in all the places where they appear.

3. Delete any previous tarballs and RPMs: rm *.gz, rm *.rpm.

4. Make sure the latest version of proleptic_utc_with_leap_seconds
   is installed.
   
5. Build and test the libtime tarball.  In the following commands,
   /usr is the location of the data file provided by
   proleptic_utc_with_leap_seconds.
   
   ./autogen.sh --download
   ./configure --prefix=/usr
   make
   make pdf
   make check
   make dist
   make distcheck

6. Type Make build_RPMs to create and test the SRPM file.

7. Do a test build of libtime on COPR by typing
   copr-cli build libtime libtime-*.src.rpm
   
8. When the build is finished, use an internet browser to connect to
   the Fedora Copr web site, log in, and examine the results of the
   libtime project build.  If the build has failed on any important
   platforms, correct any problems
   to the best of your ability and re-run the build until the only
   errors left are due to the COPR infrastructure.  At that point, tell
   the COPR web site to regenerate the repositories.

9. Wait a few minutes for the repository mirrors to receive the new
   code, then type sudo dnf update --refresh to make sure the new
   version is avaialble.
   
10. Make sure the tarball will build from the PDF:
    Create an empty subdirectory.
    Copy the PDF file to it.
    Use Okular to extract all of its embedded files.
    Type the following:
    bash fix_files.sh
    ./configure
    Make
    Make check
    Make PDF
    Make dist
    Make distcheck

If you download the tarball from the git repository, you can also download
its signature file, which has the same name as the tarball with .asc appended.
I created the signature file using gpg version 2.  To verify that the tarball
was created by me you will need my public key.  You can get my PGP public key
from a keyserver, from my web site using the WSD protocol by typing
gpg --locate-external-keys John_Sauter@systemeyescomputerstore.com
or by extracting file John_Sauter_public_key.asc from the tarball
and importing it into gpg.  That last process is not too secure, since
if the tarball is compromised the public key could also be compromised.
Thus, to improve its security, here is what you should see when you list
the public key file:

pub   rsa2048 2012-03-01 [SC]
      E24AD25BE5FE4914A60349EC70303EA19A0B511E
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
uid           keybase.io/john_sauter <john_sauter@keybase.io>
uid           [jpeg image of size 3091]
sub   rsa2048 2012-03-01 [E]
pub   rsa4096 2016-04-20 [SC] [revoked: 2016-04-20]
      BB3334308DE0C78126C7123C2A6E2A4F026FC76C
uid           John Sauter (Asus Q200E) <John_Sauter@systemeyescomputerstore.com>
sub   rsa4096 2016-04-20 [E] [revoked: 2016-04-20]
pub   rsa2048 2012-10-25 [SC]
      A62580C913EA6A40C9DCAB87064A96E03DF7EE1D
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
sub   rsa2048 2012-10-25 [E]
pub   dsa1024 2009-08-26 [SCA]
      2D8B16E2E7EBE79403234AAB644086A281CE86BF
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
sub   elg2048 2009-08-26 [E]

This should not change between versions without a good reason, so you
can examine a copy of this README file from an old tarball to increase
your confidence that the latest tarball was also created by me.

As of December 18, 2020, this is the platform support matrix for libtime
using the copr build system with test_for_disabled_adjtimex disabled.
The bugzilla entry for the problem with adjtimex is 1778298.

centos-stream-aarch64: no: package python3-pandas not available
centos-stream-x86_64: no: package python3-pandas not available
custom-1-i386: no: no useradd in chroot
custom-1-x86_64: no: no useradd in chroot
epel-6-i386: no: python version before 3.5
epel-6-x86_64: no: python version before 3.5
epel-7-aarch64: no: package python3-pandas not available
epel-7-x86_64: no: package python3-pandas not available
epel-8-aarch64: yes: with 128-bit integers
epel-8-X86_64: yes: with 128-bit integers
fedora-32-aarch64: yes: with 128-bit integers
fedora-32-armhfp: yes: without 128-bit integers 
fedora-32-i386: yes: without 128-bit integers
fedora-32-s390x: yes: with 128-bit integers
fedora-32-x86_64: yes: with 128-bit integers
fedora-33-aarch64: yes: with 128-bit integers
fedora-33-armhfp: yes: without 128-bit integers 
fedora-33-i386: yes: without 128-bit integers
fedora-33-s390x: yes: with 128-bit integers
fedora-33-x86_64: yes: with 128-bit integers
fedora-eln-aarch64: yes: with 128-bit integers
fedora-eln-i386: yes: without 128-bit integers
fedora-eln-s390x: yes: with 128-bit integers
fedora-eln-x86_64: yes: with 128-bit integers
fedora-rawhide-aarch64: yes: with 128-bit integers
fedora-rawhide-armhfp: yes: without 128-bit integers
fedora-rawhide-i386: yes: without 128-bit integers
fedora-rawhide-s390x: yes: with 128-bit integers
fedora-rawhide-x86_64: yes: with 128-bit integers
magela-7-aarch64: no: MAN file not found
magela-7-i586: no: checksum error in repo
magela-7-x86_64: no: MAN file not found
magela-cauldron-aarch64: no: status code 404 download repository metadata
magela-cauldron-i586: no: status code 404 download repository metadata
magela-cauldron-x86_64: no: status code 404 download repository metadata
opensuse-leap-15.1-aarch64: no: TZ= does not work on the command line
opensuse-leap-15.1-x86_64: no: TZ= does not work on the command line
opensuse-leap-15.2-aarch64: no: TZ= does not work on the command line
opensuse-leap-15.2-x86_64: no: TZ= does not work on the command line
opensuse-tumbleweed-aarch64: yes: with 128-bit integers
opensuse-tumbleweed-i586: no: TZ= does not work on the command line
opemsuse-tumbleweed-x86_64: yes: with 128-bit integers

Note the lack of ppc64le platforms.  In the past, when those platforms
were in the COPR build, the builds were successful when the corresponding
X86_64 builds were successful, and they supported 128-bit integers.
In addition, the build was successful with Fedora 29, 30 and 31.
