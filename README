# README for libtime project, last updated January 9, 2022.

Libtime is a package of subroutines for the manipulation of time values.
The subroutines handle leap seconds correctly by avoiding the use of
POSIX time_t for telling time.

Notes to those who write software that calls libtime subroutines:

If you wish to install libtime from the tarball you will need GNU make
and python version 3.  Install the libtime library the usual way:
    ./configure
    make
    sudo make install

In your C source code, define the entry points with:

    #include <time_subroutines.h>
    
To compile and link your program prog.c, which uses the library installed
in /usr/local/lib, do this:

    gcc -L/usr/local/lib/ -Wl,-rpath=/usr/local/lib prog.c -ltime -o prog

For installation from a repository, libtime is divided into three RPMs:
libtime for those who run programs that call libtime, libtime-devel for
those who write programs that call libtime, and libtime-doc, which contains
the comprehensive documentation for libtime.  If you install libtime
from an RPM repository the library is installed in /usr/lib rather than
/usr/local/lib, so you need specify only -ltime to compile and link with it.

In your Python source code, define the entry points with:

   import time_subroutines
   
Comprehensive documentation for the time subroutines is in avoid_time_t.pdf.
If you install libtime-doc from an RPM repository this will be in
/usr/share/doc/libtime-doc/.  If you are installing from the tarball
you can create the PDF by adding --enable-pdf to the ./configure line
before running make, or doing a second run of make with make pdf.
You will need LuaLaTeX and many of its packages to compile the PDF.
Sudo make install will then install the file in /usr/local/share/doc/libtime/.

If it is not convenient to compile the documentation, it is also available
at this URL:

https://www.systemeyescomputerstore.com/leap_seconds/avoid_time_t.pdf

In addition, there is concise documentation in man libtime.

If you download the tarball from the git repository, you can also download
its signature file, which has the same name as the tarball with .asc appended.
I created the signature file using gpg version 2.  To verify that the tarball
was created by me you will need my public key.  You can get my PGP public key
from a keyserver, from my web site using the WSD protocol by typing
gpg --locate-external-keys John_Sauter@systemeyescomputerstore.com
or by extracting file John_Sauter_public_key.asc from the tarball
and importing it into gpg.  That last process is not too secure, since
if the tarball is compromised the public key could also be compromised.
Thus, to improve its security, here is what you should see when you list
the public key file:

pub   rsa2048 2012-03-01 [SC]
      E24AD25BE5FE4914A60349EC70303EA19A0B511E
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
uid           keybase.io/john_sauter <john_sauter@keybase.io>
uid           [jpeg image of size 3091]
sub   rsa2048 2012-03-01 [E]
pub   rsa4096 2016-04-20 [SC] [revoked: 2016-04-20]
      BB3334308DE0C78126C7123C2A6E2A4F026FC76C
uid           John Sauter (Asus Q200E) <John_Sauter@systemeyescomputerstore.com>
sub   rsa4096 2016-04-20 [E] [revoked: 2016-04-20]
pub   rsa2048 2012-10-25 [SC]
      A62580C913EA6A40C9DCAB87064A96E03DF7EE1D
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
sub   rsa2048 2012-10-25 [E]
pub   dsa1024 2009-08-26 [SCA]
      2D8B16E2E7EBE79403234AAB644086A281CE86BF
uid           John Sauter <John_Sauter@systemeyescomputerstore.com>
sub   elg2048 2009-08-26 [E]

This should not change between versions without a good reason, so you
can examine a copy of this README file from an old tarball to increase
your confidence that the latest tarball was also created by me.


Notes to anyone who wishes to maintain libtime:

To create the documentation file, invoke ./configure with --enable-pdf.
You will need LuaLaTeX to build it.  Building the distribution kit builds
the PDF automatically.  For the convenience of those who write programs
that call the libtime subroutines, the documentation is also kept at this
URL:

https://www.systemeyescomputerstore.com/leap_seconds/avoid_time_t.pdf

The version number of libtime is the distribution date, since the
unpredictability of leap seconds means the library will never be finished.
When updating the version number in configure.ac, don't forget to update
the sharable image version triplet, which is in configure.ac, NEWS and
the revision history section of avoid_time_t.tex.  If you make a change
to libtime that is not backwards-compatible, you will also have to
change the spec file.  Such changes are discouraged because they
require modifying potentially all the software that depends on libtime.

The date also appears in avoid_time_t.tex, in three places: in the
PDF metadata, on the title page, and in the revision history.  The date
is also in file references.bib, so other documents can refer to the
current version.  That file is alse used by "Extending Coordinated
Universal Time to Dates Before 1972", at this URL:

https://www.systemeyescomputerstore.com/leap_seconds/proleptic_UTC.pdf

That document is the source for the leap seconds table, which is built
from file extraordinary_days.dat.  The sources for that document are embedded
in its PDF, as are the sources for libtime embedded in avoid_time_t.pdf.

There are several test program in the distribution kit, which are built
automatically.  I use test_ep to be sure all of the entry points are
working.  To verify that the distribution kit is valid, I use
make distcheck and I also extract all of the embedded files from the PDF
into a clean directory and make sure the result builds.

On platforms without a C compiler that implements 128-bit integers, a subset
library is provided, omitting int128_to_string and time_tm_nano_to_integer.
If you are cross-compiling you will need to tell the configure script
whether or not the target computer has support for 128-bit integers.

I have not tried to port libtime to the Ubuntu distribution of GNU/Linux,
but Alien seems to create reasonable .deb files from the libtime, libtime-devel
and libtime-doc RPMs.

If this is the first change you are making to libtime since taking it over
from the previous maintainer, you should add your PGP public key to the
tarball and update this README file to show it.  Don't forget to embed
your PGP public key in the PDF file.

Here is the checklist I use to be sure I am distributing working software.
I start with proleptic_utc_with_leap_seconds and libtime installed, and in the
libtime subdirectory of the show_control subdirectory of the Theatre project.

1. Perform whatever updates are called for to the libtime sources.

2. Edit file configure.ac to set the version number to the expected
distribution date, and update the version-info triplet.  There are comments in
configure.ac explaining the version-info triplet.

3. Edit file libtime.spec to set the version number to the value in
configure.ac and add an entry to the revision history.  If the only reason
we are updating libtime is because proleptic_utc_with_leap_seconds changed,
use the same comment as in that package's spec file.

4. Edit file NEWS to add the new version number, the new version-info
triplet, and the reason for the update.

5. Edit file avoid_time_t.tex to update the revision date on the title
page and in the PDF metadata.  Update the revision history using the
information in the NEWS file.

6. Type "rm *.gz" and "rm *.rpm" to get rid of old files with wrong version
numbers in their names.
   
7. Build and test the libtime tarball.  In the following commands,
/usr is the prefix of the location of the data file provided by
proleptic_utc_with_leap_seconds.  The commands should all run without error.
   
     ./autogen.sh --download
     ./configure --prefix=/usr
     make
     make pdf
     make check
     make dist
     make distcheck
     make signature
     gpg --verify libtime*.asc libtime*.tar.gz

That last step should declare that the tarball has a good signature.
You will use that signature later to verify that the tarball has
not been accidently corrupted.

8. Use evince to verify that avoid_time_t.pdf has the correct date
on its cover page, the revision hsitory has been updated and the
pagination looks OK.

9. Type "make RPMs" to create and test the SRPM file.  RPMlint
will complain that the tarball has not yet been uploaded to github.
It may also complain that the date in the changelog is in the future.
Anything else needs to be investigated.  This is the first step that tests
the spec file.  If you need to change it go back to the autogen step,
since the spec file is included in the tarball.

10. Make sure the tarball will build from the PDF:  All of these commands
should run without error.  The autogen command is at the end instead of
before configure since configure is supposed to work without first
running autogen, but autogen should still work.

    mkdir test_pdf.
    cp avoid_time_t.pdf test_pdf/
    cd test_pdf/
    mkdir examples m4 src tests
    pdfdetach -saveall avoid_time_t.pdf
    bash fix_files.sh
    ./configure --prefix=/usr
    make
    make check
    make pdf
    make dist
    make distcheck
    make RPMs
    ./autogen.sh --download

11. Type "cd .." and "rm -r test_pdf/.  We are done with the subdirectory.
    
12. Use an internet browser to log in to the Fedora COPR web site.
Navigate to project libtime.  Make sure it is configured to build
the package on all platforms.

13. Type "copr-cli build libtime libtime-*.src.rpm" to attempt to build
libtime on lots of different platforms using COPR.

14. When the build is finished, check the COPR weh site to see if it
succeeded on all of the important platforms.  If the build has failed on any
important platforms, correct any problems to the best of your ability
and re-run the build until the only errors left are due to the COPR
infrastructure.  At that point, tell the COPR web site to regenerate
the repositories.  You may be forced to declare certain formerly important
platforms as unimportant if they refuse to build the package for no good reason.
If you had to modify any of the files, return to the autogen step.

15. Wait a few minutes for the repository mirrors to receive the new
code, then type "sudo dnf update --refresh" to make sure the new
version is avaialble.  At this point you can delete old libtime repositories
from COPR.
   
16. Update the local image of the web site that shows a chart of leap seconds
and advocates for the libtime project.

    cd ~/Projects/leap_seconds/bokeh/
    make
    firefox index.html

17. Verify that the chart and its table look good.  Verify that the interactive
features of the chart work.  Verify that the links work.  If everything looks 
good type "make publish" to update the files on the local copy of the web site.

18. Type "cd ~/Projects/Theatre/show_control/libtime/"

19. Type "make distclean" and "cd ..".

20. Type "git add ." and "git commit -a -m" followed by a comment in
quotation marks describing the reason for the update.  This should be
the same comment used in the spec file.  This updates the git repository
for the show_control sub-project of the Theatre project.

21. Type "bash push_public.sh" to copy the updated files to the local
copy of the github repository.

22. Type "cd repositories/libtime", "git add ." and "git commit -a -m "
followed by the comment in quotation marks that you used above.

23. Type "git tag -s " followed by the version number from the spec file
followed by -m and the comment in quotation marks that you used above.

24. Type "git push" and "git push --tags" to copy the updated project
to github.

25. Type "gpg --verify libtime*.asc libtime*.tar.gz".  Gpg should declare 
that the tarball has a good signature.  If it does not it has been corrupted.  
Go back to the autogen step to re-create it.  You will not have to edit 
any files.

As of January 9, 2022, this is the platform support matrix for libtime
using the COPR build system with test_for_disabled_adjtimex disabled.
The bugzilla entry for the problem with adjtimex is 1778298.

centos-stream-8-aarch64: no: package python3-pandas not available
centos-stream-8-ppc64le: no: package python3-pandas not available
centos-stream-8-x86_64: no: package python3-pandas not available
centos-stream-9-aarch64: no: package python3-pandas not available
centos-stream-9-x86_64: no: package python3-pandas missing and build issues
custom-1-i386: no: no useradd in chroot
custom-1-x86_64: no: no useradd in chroot
epel-6-i386: no: python3 older than version 3.5
epel-6-x86_64: no: python3 older than version 3.5
epel-7-ppc64le: no: packages python3-pandas and python3-scipy not available
epel-7-x86_64: no: packages python3-pandas and python3-scipy not available
epel-8-aarch64: yes: with 128-bit integers but not rebuilding PDF file
epel-8-ppc64le: yes: with 128-bit integers but not rebuilding PDF file
epel-8-X86_64: yes: with 128-bit integers but not rebuilding PDF file
epel9-aarch64: no: package python3-pandas not available
epel9-x86_64: no: packages python3-pandas and python3-scipy not available

fedora-34-aarch64: yes: with 128-bit integers
fedora-34-armhfp: yes: without 128-bit integers
fedora-34-i386: yes: without 128-bit integers
fedora-34-ppc64le: yes: with 128-bit integers
fedora-34-s390x: yes: with 128-bit integers
fedora-34-x86_64: yes: with 128-bit integers
fedora-35-aarch64: yes: with 128-bit integers
fedora-35-armhfp: yes: without 128-bit integers
fedora-35-i386: yes: without 128-bit integers
fedora-35-ppc64le: yes: with 128-bit integers
fedora-35-s390x: yes: with 128-bit integers
fedora-35-x86_64: yes: with 128-bit integers 
fedora-eln-aarch64: yes: with 128-bit integers
fedora-eln-i386: no: nothing provides go-srpm-macros
fedora-eln-ppc64le: yes: with 128-bit integers
fedora-eln-s390x: yes: with 128-bit integers
fedora-eln-x86_64: yes: with 128-bit integers
fedora-rawhide-aarch64: yes: with 128-bit integers
fedora-rawhide-armhfp: yes: without 128-bit integers 
fedora-rawhide-i386: yes: without 128-bit integers
fedora-rawhide-ppc64le: yes: with 128-bit integers
fedora-rawhide-s390x: yes: with 128-bit integers
fedora-rawhide-x86_64: yes: with 128-bit integers
 
magela-8-aarch64: no: TeX not present
magela-8-i586: no: TeX not present
magela-8-x86_64: no: TeX not present
magela-cauldron-aarch64: no: TeX not present
magela-cauldron-i586: no: TeX not present
magela-cauldron-x86_64: no: TeX not present
openmandriva-cooker-aarch64: no: python3-pandas and python3-scipy not available
openmandriva-cooker-i686: no: python3-pandas and python3-scipy not available
openmandriva-cooker-x86_64: no: python3-pandas and python3-scipy not available
openmandriva-rolling-aarch64 no: python3-pandas and python3-scipy not available
openmandriva-rolling-i686: no: python3-pandas and python3-scipy not available
openmandriva-rolling-x86_64: no: python3-pandas and python3-scipy not available
opensuse-leap-15.2-aarch64: no: TeXlive 2017 microtype and pdfurl errors
opensuse-leap-15.2-x86_64: no: TeXlive 2017 microtype and pdfurl errors
opensuse-leap-15.3-aarch64: no: TeXlive 2017 microtype and pdfurl errors
opensuse-leap-15.3-x86_64: no: TeXlive 2017 microtype and pdfurl errors
opensuse-tumbleweed-aarch64: no: pygmentize not installed
opensuse-tumbleweed-i586: no: pygmentize not installed
opensuse-tumbleweed-ppc64le: no: pygmentize not installed
opensuse-tumbleweed-x86_64: no: pygmentize not installed
oraclelinux-7-aatch64: no: packages pthon3-pandas, -numpy and -scipy missing
oraclelinux-7-x86_64: no: packages pthon3-pandas, -numpy and -scipy missing
oraclelinux-8-aarch64: no: package python3-pandas not available
oraclelinux-8-x86_64: no: package python3-pandas not available

In the past, the build has also been successful with Fedoras 29 through 33.
If COPR could not build the RPM for your distribution, or your distribution
is not listed, try compiling from the sources, which are embedded in the
PDF file.


Notes to those who wish to package libtime in a distribution of GNU/Linux:

The tarball lives on github at ShowControl/libtime.  It gets its table
of leap seconds from file extraordinary_days.dat, which is provided by
package proleptic_utc_with_leap_seconds, which lives on github at
ShowControl/proleptic_utc_with_leap_seconds.  The tarball includes
a spec file which lists its dependencies.  I use that spec file
to build the package on COPR.  I would be happy to include any
modifications you make to the spec file in the tarball.

End of file README
