Libtime is a package of subroutines for the manipulation of time values
on 64-bit computers.  The subroutines handle leap seconds correctly by
avoiding the use of POSIX time_t for telling time.

Notes to those who write software that calls libtime subroutines:

If you wish to install libtime from the tarball you will need GNU make
and python version 3.  Install the libtime library the usual way:
    ./configure
    make
    sudo make install

In your C source code, define the entry points with:

    #include <time_subroutines.h>
    
To compile and link your program prog.c, which uses the library installed
in /usr/local/lib, do this:

    gcc -L/usr/local/lib/ -Wl,-rpath=/usr/local/lib prog.c -ltime -o prog

For installation from a repository, libtime is divided into three RPMs:
libtime for those who run programs that call libtime, libtime-devel for
those who write programs that call libtime, and libtime-doc, which contains
the comprehensive documentation for libtime.  If you install libtime-devel
from a RPM repository the library is installed in /usr/lib, so you need
specify only -ltime to compile and link with it.

In your Python source code, define the entry points with:

   import time_subroutines
   
Comprehensive documentation for the time subroutines is in avoid_time_t.pdf.
If you install libtime-doc from an RPM repository this will be in
/usr/share/doc/libtime-doc/.  If you are installing from the tarball
you can create the PDF by adding --enable-pdf to the ./configure line
before running make, or doing a second run of make with make pdf.
You will need LaTeX and many of its packages to compile the PDF.
Sudo make install will then install the file in /usr/local/share/doc/libtime/.

If it is not convenient to compile the documentation, it is also available
at this URL:

https://commons.wikimedia.org/wiki/File:Avoid_Using_POSIX_time_t_for_Telling_Time.pdf

In addition, there is concise documentation in man libtime.


Notes to those who maintain libtime:

To create the documentation file, invoke ./configure with --enable-pdf.
You will need LaTeX to build it.  Building the distribution kit builds
the PDF automatically.  For the convenience of those who write programs
that call the libtime subroutines, the documentation is also kept at this
URL:

https://commons.wikimedia.org/wiki/File:Avoid_Using_POSIX_time_t_for_Telling_Time.pdf

The version number of libtime is the distribution date, since the
unpredictability of leap seconds means the library will never be finished.
When updating the version number in configure.ac, don't forget to update
the sharable image version triplet, which is in configure.ac, NEWS and
the revision history section of avoid_time_t.tex.

The date also appears in avoid_time_t.tex, in three places: in the
PDF metadata, on the title page, and in the revision history.  The date
is also in file references.bib, so other documents can refer to the
current version.  That file is alse used by "Extending Coordinated
Universal Time to Dates Before 1972", at this URL:

https://commons.wikimedia.org/wiki/File:Extending_Coordinated_Universal_Time_to_Dates_Before_1972.pdf

That document is the source for the leap seconds table, which is built
from file extraordinary_days.dat.  The sources for that document are embedded
in the PDF.

There are several test program in the distribution kit, which are built
automatically.  I use test_ep to be sure all of the entry points are
working.  To verify that the distribution kit is valid, I use
make distcheck and I also extract all of the embedded files from the PDF
into a clean directory and make sure the result builds.

On platforms without a C compiler that implements 128-bit integers, a subset
library is provided, missing int128_to_string and time_tm_nano_to_integer.

I have not tried to port libtime to the Ubuntu distribution of GNU/Linux,
but Alien seems to create reasonable .deb files from the libtime, libtime-devel
and libtime-doc RPMs.

Here is the checklist I use to be sure I am distributing working software:

1. Perform whatever updates are called for to the libtime sources.

2. Update the version number to today's date, and update the version-info
   triplet, in all the places where they appear.

3. Build and test the libtime tarball.

4. do Make build_RPMs to create and test the SRPM.

5. When the build is finished, use an internet browser to connect to
   the Fedora Copr web site, log in, and examine the results of the
   build.  If the build has failed, adjust the code, the spec file or
   the platforms to make it succeed, and keep re-running it until
   it does succeed.
   
6.  Make sure the built RPMs work:
    dnf copr disable johnsauter/libtime
    dnf copr enable johnsauter/test
    dnf install libtime-devel
    compile one of the test programs and run it.
    dnf remove libtime-devel
    dnf install libtime
    Make sure the test program still runs but does not compile.
    dnf install libtime-doc
    Use evince to check the PDF at /usr/share/doc/libtime-doc/avoid_time_t.pdf

7.  When everything works, build it again for public use:
    copr-cli build libtime <name of the srpm>
    
8.  Make sure the tarball will build from the PDF:
    Create an empty subdirectory.
    Copy the PDF file to it.
    Use Okular to extract all of its embedded files.
    bash fix_files.sh.  ./configure.  Make.  Make check.
    Make PDF.  Make dist.  Make distcheck.

As of April 3, 2020, this is the platform support matrix for libtime
using the copr build system with test_for_disabled_adjtimex disabled.
The bugzilla entry for the problem with adjtimex is 1778298.

centos-stream-aarch64: yes: with 128-bit integers
centos-stream-x86_64: yes: with 128-bit integers
custom-1-i386: no: no useradd
custom-1-x86_64: no: no useradd
epel-6-i386: no: no python3 >= 3.5
epel-6-x86_64: no: no python3 >= 3.5
epel-7-aarch64: yes: with 128-bit integers
epel-7-x86_64: yes: with 128-bit integers
epel-8-aarch64: yes: with 128-bit integers
epel-8-X86_64: yes: with 128-bit integers
fedora-30-aarch64: yes: with 128-bit integers
fedora-30-i386: yes: without 128-bit integers
fedora-30-x86_64: yes: with 128-bit integers
fedora-31-aarch64: yes: with 128-bit integers
fedora-31-armhfp: yes: without 128-bit integers 
fedora-31-i386: yes: without 128-bit integers
fedora-31-x86_64: yes: with 128-bit integers
fedora-32-aarch64: yes: with 128-bit integers
fedora-32-armhfp: yes: without 128-bit integers 
fedora-32-i386: yes: without 128-bit integers
fedora-32-x86_64: yes: with 128-bit integers
fedora-rawhide-aarch64: yes: with 128-bit integers
fedora-rawhide-armhfp: yes: without 128-bit integers
fedora-rawhide-i386: yes: without 128-bit integers
fedora-rawhide-x86_64: yes: with 128-bit integers
magela-7-aarch64: no: ./depcomp: no such file or directory
magela-7-i586: no: ./depcomp: no such file or directory
magela-7-x86_64: no: ./depcomp: no such file or directory
magela-cauldron-aarch64: no: man file not found in libtime
magela-cauldron-i586: no: man file not found in libtime
magela-cauldron-x86_64: no: man file not found in libtime
opensuse-leap-15.1-aarch64: no: unable to download repo updates-oss
opensuse-leap-15.1-x86_64: no: TZ= on command line doesn't work
opensuse-tumbleweed-aarch64: yes: with 128-bit integers
opensuse-tumbleweed-i586: no: TZ= on command line doesn't work
opemsuse-tumbleweed-x86_64: yes: with 128-bit integers

Note the lack of ppc64le platforms.  In the past, when those platforms
were in the COPR build, the builds were successful when the corresponding
X86_64 builds were successful, and they supported 128-bit integers.
In addition, the build was successful with Fedora 29.
