.TH LIBTIME 3 "2019-12-25" "John Sauter"
.SH NAME
libtime \- manipulate representations of time
.SH SYMOPSIS
.B #include <time_subroutines.h>
.sp
These subroutines are packaged in a library called libtime which is
installed in either /usr/lib or /usr/local/lib.  In the latter case,
to include them when linking,
specify \fB -L/usr/local/lib -Wl,-rpath -Wl,/usr/local/lib -ltime \fR
in your GCC command line.
.SH DESCRIPTION
The \fI libtime \fR
functions manipulate representations of time.  They are centered
on the \fI TM \fR structure, and take leap seconds into account.
See below for a reference to the full documentation.
.sp
.TP
int int128_to_string (__int128 *value, char *result, int result_size);
Convert a 128-bit integer to a string.
Value is the input; result is the output, whose size is limited
to result_size bytes.
The return value is the number of bytes stored in the result,
not counting the trailing NUL byte.
.sp
.TP
int time_copy_tm (struct tm *in_tm, struct tm *out_tm);
Copy a tm structure.  In_tm is the input; it is copied to out_tm.
.sp
.TP
int time_current_tm (struct tm *current_tm);
Fetch the current time, without nanoseconds.  The current time is stored
in current_tm as UTC.
.sp
.TP
int time_current_tm_nano (struct tm *current_tm, int *nanoseconds);
Fetch the current time, including nanoseconds.  The current time is stored
in current_tm as UTC.  The number of nanoseconds since that time is stored
in nanoseconds.
.sp
.TP
long long int time_diff (struct tm *A_tm, struct tm *B_tm, int variable_length_seconds_before_year);
Compute the difference in seconds between two times expressed as UTC.
A_tm is the eariler
time, B_tm is the later time.  The number of seconds returned includes
any leap seconds between the two dates.  If variable_length_seconds_before_year
is greater than INT_MIN, leap seconds before January 1 of that year are
ignored.  Ignore leap seconds before 1972
if you are solving a calendar-based problem.  Include leap seconds before 1972
if you are solving a physical problem that does not depend on the calendar,
such as computing the distance an object will fall between two dates.
Using leap seconds before 1972 makes times correspond more closely to the
Earth's rotation, in the same way that using the Gregorian calendar makes
the dates correspond more closely to the seasons.
.sp
.TP
int time_DTAI (int Julian_day_number, int variable_length_seconds_before_year);
Fetch the difference between TAI and UTC at the beginning
of the specified day, given by its Julian Day Number.
This function is used internally to
determine the number of leap seconds between two dates.  If
variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year are ignored.
Note that Julian days start at noon, so midnight would be an
integer plus 0.5.  For convenience this subroutine just takes
the integer part of the Julian Day Number, with the understanding
that the number plus 0.5 is midnight of the specified day.
.sp
.TP
int time_Julian_day_number (int year, int month, int day);
Compute the Julian Day Number corresponding to a date.
Year is the year, month is the month, and day is the day of the month.
The return value is the computed Julian Day Number.  The Julian Day Number
of a day is one more than the Julian Day Number of the previous day,
and one less than the Julian Day Number of the next day.
Dates before the
adoption of the Gregorian calendar use the Proleptic Gregorian Calendar,
which extends the Gregorian leap year rules back in time.  The Gregorian and
Proleptic Gregorian calendars matche dates to seasons better than the Julian
calendar.  This function is used internally to turn a date into a simpler
count of days.
Note that Julian days start at noon, so midnight would be an
integer plus 0.5.  For convenience this subroutine just takes
the integer part of the Julian Day Number, with the understanding
that the number plus 0.5 is midnight of the specified day.
.sp
.TP
int time_length_local_minute (struct tm *time_tm, int variable_length_seconds_before_year);
Compute the length of the current minute of local time, in seconds.
Time_tm is the current time, expressed as local time.
This is usually be 60, but will be 61 in the presence of a positive leap second,
or 59 in the presence of a negative leap second.
.sp
.TP
int time_length_month (struct tm *time_tm);
Compute the length of the current month.  Time_tm is the current time.
This is usually 30 or 31, but
February will be 28 or 29 depending on the year.
.sp
.TP
int time_length_prev_local_minute (struct tm *time_tm, int variable_length_seconds_before_year);
Compute the length of the previous minute of local time in seconds.
Time_tm is the current time, expressed in local time.
This is usually be 60, but will be 61 in the presence of a positive leap second,
or 59 in the presence of a negative leap second.  If the current minute is
the first minute of the year, the previous minute will be the last minute
of the previous year.
.sp
.TP
int time_length_prev_month (struct tm *time_tm);
Compute the length of the previous month.  Time_tm is the current time,
expressed in UTC.  This is usually 30 or 31, but
February will be 28 or 29 depending on the year.
.sp
.TP
int time_length_prev_UTC_minute (struct tm *time_tm, int variable_length_seconds_before_year);
Compute the length of the previous minute of Coordinated Universal Time in
seconds.  Time_tm is the current time, expressed as UTC.
This is usually be 60, but will be 61 in the presence of a positive leap second,
or 59 in the presence of a negative leap second.  If the current minute is
the first minute of the year, the previous minute will be the last minute
of the previous year.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_length_UTC_minute (struct tm *time_tm, int variable_length_seconds_before_year);
Compute the length of the current minute of Coordinated Universal Time in
seconds.  Time_tm is the current time.
This is usually be 60, but will be 61 in the presence of a positive leap second,
or 59 in the presence of a negative leap second.  If the current minute is
the first minute of the year, the previous minute will be the last minute
of the previous year.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_days (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add days to a local time.  Time_tm is the current time, expressed as local time.
The result overwrites this value.  Addend is the number of days to add;
a negative values causes days to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can happen,
for example, when adding one day to December 31, 2016 at 18:59:60 New York time.
The result is January 1, 2017 at 18:59:60, which is invalid.  If rounding_mode
is 1, the result is adjusted to January 1, 2017 at 19:00:00.  If rounding_mode
is -1, the result is adjusted to January 1, 2017, at 18:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_hours (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add hours to a local time.  Time_tm is the current time, expressed as local
time.  The result overwrites this value.  Addend is the number of hours to add;
a negative value causes hours to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can
happen, for example, when adding one hour to December 31, 2016 at 18:59:60
New York time.  The result is December 31, 2017 at 19:59:60, which is invalid.
If rounding_mode is 1, the result is adjusted to December 31, 2016 at 20:00:00.
If rounding_mode is -1, the result is adjusted to December 31, 2016 at 19:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_minutes (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add minutes to a local time.  Time_tm is the current time, expressed as local
time.  The result overwrites this value.  Addend is the number of minutes to
add; a negative value causes minutes to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can
happen, for example, when adding subtracting one minute from December 31, 2016
at 18:59:60 New York time.  The result is December 31, 2017 at 18:58:60,
which is invalid.
If rounding_mode is 1, the result is adjusted to December 31, 2016 at 18:59:00.
If rounding_mode is -1, the result is adjusted to December 31, 2016 at 18:58:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_months (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add months to a local time.  Time_tm is the current time, expressed as local
time.  The result overwrites this value.  Addend is the number of months to
add; a negative value causes months to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can
happen, for example, when adding adding one month to January 31, 2015
New York time.  The result is February 31, 2017 which is invalid.
If rounding_mode is 1, the result is adjusted to March 1, 2015.
If rounding_mode is -1, the result is adjusted to February 28, 2015.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_seconds (struct tm *time_tm, long long int add_seconds, int variable_length_seconds_before_year);
Add seconds to a local time.  Time_tm is the current time, expressed as local
time.  Add_seconds is the number of seconds to add.  Note that it is a 64-bit
integer, to facilitate navigating by seconds through a large span of time.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_seconds_ns (struct tm *time_tm, long long int *nanoseconds, long long int add_seconds, long long int add_nanoseconds, int variable_length_seconds_before_year);
Add seconds and nanoseconds to a local time.  Time_tm is the current time,
expressed as local time.  Nanoseconds is the number of nanoseconds since
time_tm, which can only express time to the second.  The result overwrites
time_tm and nanoseconds.  Add_seconds is the number of seconds to add.
Add_nanoseconds is the number of nanoseconds to add.  If you just want to
navigate the calendar by nanoseconds, you can keep add_seconds 0 and put
the entire span in add_nanoseconds.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_add_years (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add years to a local time.  Time_tm is the current time, expressed as local
time.  The result overwrites this value.
Addend is the number of years to
add; a negative value causes years to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can
happen, for example, when adding subtracting one year from December 31, 2016
at 18:59:60 New York time.  The result is December 31, 2015 at 18:59:60,
which is invalid.
If rounding_mode is 1, the result is adjusted to December 31, 2015 at 19:00:00.
If rounding_mode is -1, the result is adjusted to December 31, 2015 at 18:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_local_normalize (struct tm *time_tm, long long int seconds, int variable_length_seconds_before_year);
Make sure all of the fields of a tm structure containing local time are
within their valid ranges.  Time_tm is the TM value to be normalized; the
result overwrites this value.  Seconds holds the seconds value from the
TM structure, so it can be a 64-bit value.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
This function is used internally to make sure the TM structure shows a valid
time before returning it.
.sp
.TP
int time_local_to_UTC (struct tm *local_time, struct tm *coordinated_universal_time, int variable_length_seconds_before_year);
Convert local time to Coordinated Universal Time.  Local_time is the input,
coordinated_universal_time is the ouutput.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_sleep_until (struct tm *time_tm, int nanoseconds, int variable_length_seconds_before_year);
Sleep until a specified Coordinated Universal Time.
Time_tm is the target of the sleep, to the second.  Nanoseconds specifies
the number of nanoseconds after time_tm is the target.  If the specified time
is in the past this function returns immediately; otherwise it sleeps until
at least the specified time, and then returns.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored when computing the amount of time to sleep.
.sp
.TP
int time_test_for_disabled_adjtimex();
Some environments disable the Linux adjtimex function because it can be used
to modify system state.  The disable applies to all calls to adjtimex, even
those which only fetch information.  Because adjtimex is the only function
that will reveal that a leap second is in progress, it is needed for
correct handling of time.  This function returns 0 if and only if
the adjtimex function can be used to fetch information.  Programs that
wish to operate correctly in the presence of a leap second should
exit with an error message if this function returns a non-zero value.
.TP
int time_tm_nano_to_integer (struct tm *input_tm, int input_nanoseconds, __int128 *result);
Convert the time and nanoseconds to a 128-bit integer.
Input_tm is the time to convert, to the second; input_nanoseconds is
the additional nanoseconds.  Result is the result.
.sp
.TP
int time_tm_nano_to_string (struct tm *input_tm, int input_nanoseconds, char *current_time_string, int current_time_string_length);
Convert the time and nanoseconds to a string.
Input_tm is the time to convert, to the second; input_nanoseconds is
the additional nanoseconds.  Current_time_string is the result, with its
length limited to current_time_string_length bytes.  The format follows RFC 3339
and ISO 8601 and can handle both UTC and local time.
The return value is the number of bytes stored in the string, not counting
the trailing NUL byte.
.sp
.TP
int time_tm_to_integer (struct tm *input_tm, long long int *result);
Convert the time to a long long integer.
Input_tm is the time to be coverted; result is the result.
.sp
.TP
int time_tm_to_string (struct tm *input_tm, char *current_time_string, int current_time_string_length);
Convert the time to a string.  Input_tm is the time to convert.
Current_time_string is the result, with its
length limited to current_time_string_length bytes.  The format follows RFC 3339
and ISO 8601 and can handle both UTC and local time.
The return value is the number of bytes stored in the string, not counting
the trailing NUL byte.
.sp
.TP
int time_UTC_add_days (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add days to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
The result overwrites this value.  Addend is the number of days to add;
a negative values causes days to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can happen,
for example, when adding one day to December 31, 2016 at 23:59:60.
The result is January 1, 2017 at 23:59:60, which is invalid.  If rounding_mode
is 1, the result is adjusted to January 2, 2017 at 00:00:00.  If rounding_mode
is -1, the result is adjusted to January 1, 2017, at 23:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_hours (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_after_year);
Add hours to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
The result overwrites this value.  Addend is the number of hours to add;
a negative values causes hours to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can happen,
for example, when adding one hour to December 31, 2016 at 23:59:60.
The result is January 1, 2017 at 00:59:60, which is invalid.  If rounding_mode
is 1, the result is adjusted to January 1, 2017 at 01:00:00.  If rounding_mode
is -1, the result is adjusted to January 1, 2017, at 00:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_minutes (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add minutes to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
The result overwrites this value.  Addend is the number of minutes to add;
a negative values causes minutes to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can happen,
for example, when adding one minute to December 31, 2016 at 23:59:60.
The result is January 1, 2017 at 00:00:60, which is invalid.  If rounding_mode
is 1, the result is adjusted to January 1, 2017 at 00:01:00.  If rounding_mode
is -1, the result is adjusted to January 1, 2017, at 00:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_months (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add months to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
The result overwrites this value.  Addend is the number of months to add;
a negative values causes months to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can happen,
for example, when adding one month to January 31, 2015.
The result is February 31, 2015 which is invalid.  If rounding_mode
is 1, the result is adjusted to March 1, 2015.  If rounding_mode
is -1, the result is adjusted to February 28, 2015.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_seconds (struct tm *time_tm, long long int add_seconds, int variable_length_seconds_before_year);
Add seconds to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.  Add_seconds is the number of
seconds to add.  Note that it is a 64-bit
integer, to facilitate navigating by seconds through a large span of time.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_seconds_ns (struct tm *time_tm, long long int *nanoseconds, long long int add_seconds, long long int add_nanoseconds, int variable_length_seconds_before_year);
Add seconds and nanoseconds to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
Nanoseconds is the number of nanoseconds since
time_tm, which can only express time to the second.  The result overwrites
time_tm and nanoseconds.  Add_seconds is the number of seconds to add.
Add_nanoseconds is the number of nanoseconds to add.  If you just want to
navigate the calendar by nanoseconds, you can keep add_seconds 0 and put
the entire span in add_nanoseconds.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_add_years (struct tm *time_tm, int addend, int rounding_mode, int variable_length_seconds_before_year);
Add years to a Coordinated Universal Time.
Time_tm is the current time, expressed as UTC.
The result overwrites this value.
Addend is the number of years to
add; a negative value causes years to be subtracted.
Rounding_mode is used when the resulting time is invalid.  This can
happen, for example, when adding subtracting one year from December 31, 2016
at 23:59:60.  The result is December 31, 2015 at 23:59:60,
which is invalid.
If rounding_mode is 1, the result is adjusted to January 1, 2016 at 00:00:00.
If rounding_mode is -1, the result is adjusted to December 31, 2015 at 23:59:59.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.sp
.TP
int time_UTC_normalize (struct tm *time_tm, long long int seconds, int variable_length_seconds_before_year);
Make sure all of the fields of a tm structure containing a
Coordinated Universal Time are within their valid ranges.
Time_tm is the TM value to be normalized; the
result overwrites this value.  Seconds holds the seconds value from the
TM structure, so it can be a 64-bit value.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
This function is used internally to make sure the TM structure shows a valid
time before returning it.
.sp
.TP
int time_UTC_to_local (struct tm *coordinated_universal_time, struct tm *local_time, int variable_length_seconds_before_year);
Convert Coordinated Universal Time to local time.
Coordinated_universal_time is the input time, in UTC.
The result is stored in local_time.
If variable_length_seconds_before_year is greater than INT_MIN,
leap seconds before January 1 of the specified year
are ignored.
.SH SEE ALSO
A paper on why you should use these functions is available at
\%https://commons.wikimedia.org/wiki/File:Avoid_Using_POSIX_time_t_for_Telling_Time.pdf
It contains additional documentation and some examples of how to use these
subroutines.


